@page "/"
@page "/index.html"
@inject IJSRuntime JSRuntime
@inject IEnumerable<IParser> Parsers

<PageTitle>The YouTube Chapter List Creator</PageTitle>
<HeadContent>
    <meta name="description" content="Use this app to convert a csv file with chapter/marker details into text you can paste into your YouTube video description to create Chapters" />
    <meta name="keywords" content="YouTube Chapters, YouTube, Chapters, Timecode" />
    <meta name="robots" content="index, follow" />
</HeadContent>

<FluentHeader Style="background-color:#FF0000">
    The YouTube Chapter List Creator
</FluentHeader>

<div style="width:400px;margin-left:auto;margin-right:auto;margin-top:15px;">
    <h1>Drop your Davinci Resolve CSV Edit Index File Here:</h1>
    <FluentInputFile Id="my-file-uploader"
    Mode="InputFileMode.Buffer"
    Multiple="true"
    MaximumFileCount="1"
    MaximumFileSize="@(10*1024*1024)"
    Accept="text/csv"
    @bind-ProgressPercent="@ProgressPercent"
    OnCompleted="@OnCompletedAsync"
    Style="height: 300px;">
        <ChildContent>
            <label for="my-file-uploader">
                <FluentIcon Value="@(new @Icons.Regular.Size24.ArrowUpload())" />
            </label>

            <div>
                Drag the file here you wish to process,
                or <label for="my-file-uploader">browse</label>
                for it<span style="color: red;">*</span>.
                <br />
                <em>Currently only supports Davinci Resolve Edit Index CSVs</em>
            </div>
        </ChildContent>
    </FluentInputFile>

    @if (Files.Any())
    {
        <h4>File(s) uploaded:</h4>
        <ul>
            @foreach (var file in Files)
            {
                <li>
                    <b>@file.Name</b> 🔹
                    @($"{Decimal.Divide(file.Size, 1024):N} KB") 🔹
                    @file.ContentType 🔹
                    @file.LocalFile?.FullName
                    @file.ErrorMessage
                </li>
            }
        </ul>
    }

    <h1>Paste text text into your YouTube Video Description:</h1>
    <FluentButton IconStart="@(new Icons.Regular.Size16.Copy())" Style="float:right;" OnClick="CopyTextToClipboard">Copy</FluentButton>
    <FluentTextArea @bind-Value=@CSVText Rows="20" Resize="TextAreaResize.Vertical" Style="width:100%;" />

</div>
@code
{
    private string CSVText = string.Empty;
    private int ProgressPercent = 0;
    private FluentInputFileEventArgs[] Files = Array.Empty<FluentInputFileEventArgs>();

    private async Task CopyTextToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", CSVText);
    }

    private async Task OnCompletedAsync(IEnumerable<FluentInputFileEventArgs> files)
    {
        Files = files.ToArray();
        // eventually have a dropdown of parsers that implement IParser and call it here
        List<IParser> parsers = [new DavinciResolveParser()];
        CSVText = Parsers.FirstOrDefault().Parse(Files);
        if(string.IsNullOrEmpty(CSVText)){
            CSVText = "An invalid file was selected. Make sure the file you select is a Davinci Resolve Edix Index CSV file.";
        }
        // Wait 3 seconds before to reset the progress bar.
        await Task.Delay(3000);
        ProgressPercent = 0;
    }
}

